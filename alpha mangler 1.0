              ///////////////////////////////////////////////////////////////////////////////////////////////
             //                                                                                           //
            //                             Midi Shredder, 2019                                           //
           //                                                                                           // 
          //        A 7 octave midi sketchpad, Potentiometers to control note, octave, and scale       //       
         //        transposition. Column buttons map to notes I II III IV V VI VII. Each row is       //       
        //        shifted down one octave. USBMIDI out.                                              //
       //                                                                                           //
      //         Code written for PJRC Teensy 3.5. Thanks to Johan.                                //
     //                                                                                           //
    ///////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                   

#define MIDI_CH 1            // MIDI channel
#define VELOCITY 64          // MIDI note velocity (64 for medium velocity, 127 for maximum)
#define START_NOTE 48        // MIDI start note (60 is middle C)

#define LED_PIN 13           // LED to indicate midi activity
#define BRIGHT_LED 1         // LED brightness, 0 is low, 1 is high

#define CHECK_INTERVAL 4     // interval in ms for sensor check

unsigned long currentMillis = 0L;
unsigned long statusPreviousMillis = 0L;

byte colPin[7]          = {40, 41, 42, 43, 44, 45, 46};       // teensy digital input pins for keyboard columns 
byte colNote[7]         = {  0 , 2 , 3 , 5 , 7 , 9 , 11  };   // column note is VAL from the start note (-1 plays silent midi note)                                           
                                                            // column setup right now is C Harmonic Minor starting from START NOTE 
                                                            // basenote    Db, Ab, Eb, Bb,  F,  C,  G,  D,  A,  E,  B, F#
                                                            // col/note     1,  8,  3, 10,  5,  0,  7,  2,  9,  4, 11,  6
                                                            // for chromatic order, C to B, straight order 0 to 11
                                                            // original tlc strummer design only use pins 5 through 12 (basenotes Bb to B)

byte rowPin[7]           = {53, 52, 51, 50, 49, 48, 47};                         // teensy output pins for keyboard rows
byte activeNote[7]      = {0,0,0,0,0,0,0};                   // keeps track of active notes 
                                                            // row            0,   1,   2, 3, 4, 5, 6
                                                           // Midiregister 0 to 7, from binary row combinations
                                                         
            

byte midiNote;               // current reading
int calcMidi;                // calculated midi note number
int basenote = 0;                 // basenote key setting (base note of basenote)
int Midiregister = 0;             // basenote type (maj, min, 7th...)

int basenoteNote[7][7] = {        // should be basenote notes for each column button
 // { 0, 1, 2, 3, 4, 5, 6 },  //chromatic ie Col I= START_NOTE + 0, Col II= START_NOTE + 1, Col III= START_NOTE +  3...
 // { 0, 2, 4, 5, 7, 9, 11 },  //major/ionian
 // { 0, 2, 3, 5, 7, 9, 10 },  //dorian
 // { 0, 1, 3, 5, 7, 8, 10 },  //phrygian
 // { 0, 2, 4, 6, 7, 9, 11 },  //lydian
//  { 0, 2, 4, 5, 7, 9, 10 },  //mixolydian
 // { 0, 2, 3, 5, 7, 8, 10 },  //natural minor/aeolian
 // { 0, 1, 3, 5, 6, 8, 10 },  //locrian
  //{ 0, 1, 4, 5, 7, 8, 10 },  //freygish            

{ 12  , 14  , 15  , 17  , 19  , 21  , 23  },    //I tried as a test to make each pressed col button be transposed an octave based on the row selected. This did not work. 
{ 24  , 26  , 27  , 29  , 31  , 33  , 35  },
{ 36  , 38  , 39  , 41  , 43  , 45  , 47  },
{ 48  , 50  , 51  , 53  , 55  , 57  , 59  },
{ 60  , 62  , 63  , 65  , 67  , 69  , 71  },
{ 72  , 74  , 75  , 77  , 79  , 81  , 83  },

//  { 0, 2, 3, 5, 7, 8, 11 },  //harmonic minor
 // { 0, 3, 4, 7, 9, 10, 12 },  //major blues
  //{ 0, 3, 5, 6, 7, 10, 12 },  //minor blues      
 // { 0, 2, 4, 7, 9, 12, 14 },  //major pentatonic
//  { 0, 3, 5, 7, 10, 12, 15 },  //minor pentatonic
 // { 0, 2, 3, 5, 6, 8, 9 },  //diminish
 // { 0, 1, 3, 4, 6, 7, 9 },  //combi diminish    
  //{ 0, 1, 4, 5, 7, 8, 11 },  //raga bhairav
 // { 0, 1, 4, 6, 7, 9, 11 },  //raga gamansrama
//  { 0, 1, 3, 6, 7, 8,11 },  //raga todi
 // { 0, 1, 3, 4, 5, 7, 8 },  //spanish
//  { 0, 2, 3, 6, 7, 8,11 },  //gypsy
//  { 0, 2, 4, 5, 6, 8,10 },  //arabian
 // { 0, 2, 5, 7,10,12,14 },  //egyptian
 // { 0, 2, 3, 7, 9,12,14 },  //hawaiian
 // { 0, 1, 3, 7, 8,12,13 },  //bali pelog
 // { 0, 1, 5, 7, 8,12,13 },  //japan
 // { 0, 4, 5, 7,11,12,16 },  //ryukyu
 //{ 0, 2, 4, 6, 8,10,12 },  //wholetone
 // { 0, 3, 4, 7, 8,11,12 },  //augmented
 // { 0, 2, 4, 6,10,12,14 },  //prometheus
 // { 0, 1, 4, 6, 7,10,12 }   //tritone
  

};

// SETUP
void setup() 
{
  for (int i = 0; i < 7; i++) 
  {
     pinMode(colPin[i],INPUT);
  }
    for (int i = 0; i < 7; i++) 
  {
     pinMode(rowPin[i],OUTPUT);
     digitalWrite(rowPin[i],LOW);
  }
  pinMode(LED_PIN, OUTPUT);
}

// MAIN LOOP
void loop() 
{
  currentMillis = millis();
  if ((unsigned long)(currentMillis - statusPreviousMillis) >= CHECK_INTERVAL) 
  {
    if (BRIGHT_LED) digitalWrite(LED_PIN, LOW);                          // led off for high brightness
    readKeyboard();                                                      // read keyboard input and replay active notes (if any) with new basenoteing
    for (int readButtons = 0; readButtons < 7; readButtons++) 
  {       // scan sensors for changes and send note on/off accordingly
      midiNote = ((readButtons));      // read touch pad/pin/electrode/string/whatever
      if (midiNote != activeNote[readButtons]) 
    {
        calcMidi = START_NOTE + basenote + basenoteNote[Midiregister][readButtons];
        if ((calcMidi < 128) && (calcMidi > -1) && (basenoteNote[Midiregister][readButtons] > -1)) 
    {    // we don't want to send midi out of range or play silent notes
          digitalWrite(LED_PIN, HIGH);                                // sending midi, so light up led
          if (midiNote)
      {
              usbMIDI.sendNoteOn(calcMidi, VELOCITY, MIDI_CH);      // send Note On, USB MIDI
          } else 
      {
              usbMIDI.sendNoteOff(calcMidi, VELOCITY, MIDI_CH);     // send note Off, USB MIDI
          }
          if (!BRIGHT_LED) digitalWrite(LED_PIN, LOW);                // led off for low brightness
        }  
        activeNote[readButtons] = midiNote;         
      }  
    }
    statusPreviousMillis = currentMillis;                             // reset interval timing
  }
}
// END MAIN LOOP

// Check basenote keyboard, if changed shut off any active notes and replay with new basenote
void readKeyboard() 
{
  int readbasenote = 0;
  int readMidiregister = 0;
  for (int row = 0; row < 7; row++) 
  {     // scan keyboard rows
    enableRow(row);                       // set current row low
    for (int col = 0; col < 7; col++) 
  {  // scan keyboard columns
      if (!digitalRead(colPin[col])) 
    {    // is scanned pin low (active)?
        readbasenote = colNote[col];         // set basenote base note
        readMidiregister |= (1 << row);      // set row bit in basenote type
      }
    }
  }  
  if ((readbasenote != basenote) || (readMidiregister != Midiregister)) 
  { // have the values changed since last scan?
    for (int i = 0; i < 7; i++) 
  {
       calcMidi = START_NOTE + basenote + basenoteNote[Midiregister][i];
       if ((calcMidi < 128) && (calcMidi > -1) && (basenoteNote[Midiregister][i] > -1)) 
     {      // we don't want to send midi out of range or play silent notes
         if (activeNote[i]) 
     {
          digitalWrite(LED_PIN, HIGH);                        // sending midi, so light up led
          usbMIDI.sendNoteOff(calcMidi, VELOCITY, MIDI_CH); // send Note Off, USB MIDI
          if (!BRIGHT_LED) digitalWrite(LED_PIN, LOW);        // led off for low brightness
         }
       }
    }
    for (int i = 0; i < 7; i++) 
  {
      calcMidi = START_NOTE + readbasenote + basenoteNote[readMidiregister][i];
      if ((calcMidi < 128) && (calcMidi > -1) && (basenoteNote[readMidiregister][i] > -1)) 
    {    // we don't want to send midi out of range or play silent notes
        if (activeNote[i]) 
    {
          digitalWrite(LED_PIN, HIGH);                        // sending midi, so light up led
          usbMIDI.sendNoteOn(calcMidi, VELOCITY, MIDI_CH);  // send Note On, USB MIDI
          if (!BRIGHT_LED) digitalWrite(LED_PIN, LOW);        // led off for low brightness
        }
      }
    }
    basenote = readbasenote;
    Midiregister = readMidiregister;
  }
}

// Set selected row low (active), others to Hi-Z
void enableRow(int row) 
{
  for (int rc = 0; rc < 7; rc++) 
  {
    if (row == rc) 
  {
      pinMode(rowPin[rc], OUTPUT);
      digitalWrite(rowPin[rc], LOW);
    } else {
      digitalWrite(rowPin[rc], HIGH);
      pinMode(rowPin[rc], INPUT); // Put to Hi-Z for safety against shorts
    }
  }
  delayMicroseconds(30); // wait before reading ports (let ports settle after changing)
}
